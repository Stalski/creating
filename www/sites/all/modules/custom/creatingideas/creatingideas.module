<?php

/*
 * @file
 * Custom code for Creating Ideas.
 */


/**
 * @see hook_commerce_payment_method_info().
 */
module_load_include('inc', 'creatingideas', 'includes/payment');

/**
 * @see hook_commerce_shipping_method_info().
 */
module_load_include('inc', 'creatingideas', 'includes/shipping');

/**
 * Implements hook_menu().
 */
function creatingideas_menu() {

  $items = array();

  // Creating settings.
  $items['admin/config/creating'] = array(
    'title' => 'Creating',
    'description' => 'Creating tools & settings.',
    'position' => 'left',
    'weight' => -30,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  $items['admin/config/creating/general'] = array(
    'title' => 'General settings',
    'description' => 'Creating general settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('creatingideas_global_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/admin.inc',
    'weight' => -10,
  );

  $items['admin/config/creating/social'] = array(
    'title' => 'Social settings',
    'description' => 'Creating social settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('creatingideas_social_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/admin.inc',
    'weight' => -10,
  );

  $items['admin/config/creating/webshop'] = array(
    'title' => 'Webshop settings',
    'description' => 'Creating webshop settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('creatingideas_webshop_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/admin.inc',
    'weight' => -10,
  );

  $items['admin/config/creating/contact'] = array(
    'title' => 'Contact settings',
    'description' => 'Creating contact settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('creatingideas_contact_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/admin.inc',
    'weight' => -10,
  );

  return $items;

}

/**
 * Implements hook_theme().
 */
function creatingideas_theme($existing, $type, $theme, $path) {

  return array(
    'creatingideas_product_category_tree' => array(
      'variables' => array('items' => array()),
      'file' => 'theme.inc',
      'path' => "$path/theme",
      'template' => 'creatingideas-product-category-tree',
    ),
    'creatingideas_product_carousel' => array(
      'variables' => array('items' => array()),
      'file' => 'theme.inc',
      'path' => "$path/theme",
      'template' => 'creatingideas-product-carousel',
    ),
  );

}

/**
 * Implements hook_field_formatter_info().
 */
function creatingideas_field_formatter_info() {
  return array(
    'creating_dimensions_short' => array(
      'label' => t('Formatted dimensions (A cm)'),
      'field types' => array('physical_dimensions'),
      'settings' => array(),
    ),
    'creating_dimensions_formatted' => array(
      'label' => t('Formatted dimensions (A x B cm)'),
      'field types' => array('physical_dimensions'),
      'settings' => array(),
    ),
    'creating_price_dimensions_formatted' => array(
      'label' => t('Formatted Price / dimensions (â‚¬ 6,75 / B cm)'),
      'field types' => array('physical_dimensions'),
      'settings' => array(),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function creatingideas_field_formatter_view($entity_type, $entity, $field, $instances = NULL, $langcode = NULL, $items = NULL, $display = NULL) {

  $settings = array_merge(field_info_formatter_settings($display['type']), $display['settings']);

  $element = array();

  // Loop through each item in this field.
  foreach ($items as $delta => $item) {
    // Generate the HTML based on the formatter.
    switch ($display['type']) {

      case 'creating_dimensions_formatted':

        $data = array();
        $dimensions = array(
          'length' => array(
            'name' => t('Length'),
          ),
          'width' => array(
            'name' => t('Width'),
          ),
        );
        foreach ($dimensions as $key => $dimension) {
          $data[] = round($item[$key], 5);
        }

        // The rounded values joined together with the unit abbreviation appended.
        $html = implode(' &times; ', $data) . ' ' . t('cm');
        break;

      case 'creating_dimensions_short':

        $data = array();
        $data[] = round($item['length'], 5);
        // The rounded values joined together with the unit abbreviation appended.
        $html = ' &times; ' . $data[0] . ' ' . t('cm');
        if (!empty($display) && isset($display['views_view']) && isset($display['views_view']->result[$display['views_row_id']]->commerce_line_item_field_data_commerce_line_items_quantity)) {
          $quantity = $display['views_view']->result[$display['views_row_id']]->commerce_line_item_field_data_commerce_line_items_quantity;
          $html .= ' = <strong>' . $quantity * $data[0] . t('cm') . '</strong>';
        }
        break;

      case 'creating_price_dimensions_formatted':

        $data = array();
        $data[] = round($item['length'], 5);

        $price_items = field_get_items('commerce_product', $entity, 'commerce_price');
        $price_html = commerce_currency_format($price_items[0]['amount'], $price_items[0]['currency_code'], $entity);
        // The rounded values joined together with the unit abbreviation appended.
        $html = $price_html . ' / ' . $data[0] . ' ' . t('cm');

        if (!empty($display) && isset($display['views_view']) && isset($display['views_view']->result[$display['views_row_id']]->commerce_line_item_field_data_commerce_line_items_quantity)) {
          $quantity = $display['views_view']->result[$display['views_row_id']]->commerce_line_item_field_data_commerce_line_items_quantity;
          $html .= ' = <strong>' . $quantity * $data[0] . t('cm') . '</strong>';
        }

        break;

    }

    // Add the link to the returned element array.
    $element[$delta] = array(
      '#markup' => $html,
    );
  }

  return $element;
}

/**
 * Implements hook_library().
 */
function creatingideas_library() {
  $libraries['jquery_ui_spinner'] = array(
    'title' => 'jQuery Spinner',
    'website' => 'http://github.com/btburnett3/jquery.ui.spinner/',
    'version' => '1.8',
    'js' => array(
      libraries_get_path('jquery_ui_spinner') . '/ui.spinner.min.js' => array(),
    ),
    'css' => array(
      libraries_get_path('jquery_ui_spinner') . '/ui.spinner.css' => array(),
    ),
    'dependencies' => array(
      array('system', 'ui.widget'),
    ),
  );
  return $libraries;
}

/**
 * Implements hook_form_<views_content_views_content_type_edit_form>_alter().
 * @param type $form
 * @param type $form_state
 */
function creatingideas_form_views_content_views_content_type_edit_form_alter(&$form, &$form_state) {

  $form['override_title_element'] = array(
    '#type' => 'textfield',
    '#default_value' => empty($form_state['conf']['override_title_element']) ? 'h2' : $form_state['conf']['override_title_element'],
    '#title' => t('Override title element'),
    '#id' => 'override-title-element',
    '#weight' => -1,
  );
  $form['#submit'][] = 'creatingideas_form_views_content_views_content_type_edit_form_submit';
}

/**
 * Extra submit handler to save extra config for the content type (views type).
 * @param type $form
 * @param array $form_state
 */
function creatingideas_form_views_content_views_content_type_edit_form_submit($form, &$form_state) {
  $form_state['conf']['override_title_element'] = $form_state['values']['override_title_element'];
}

/**
 * Implements hook_ctools_plugin_api().
 * @param type $owner
 * @param type $api
 * @return type
 */
function creatingideas_ctools_plugin_api($owner, $api) {
  if ($owner == 'creatingideas' && $api == 'plugins') {
    return array('version' => 2);
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function creatingideas_ctools_plugin_directory($owner, $plugin_type) {
  if (($owner == 'creatingideas' || $owner == 'ctools') && $plugin_type == 'content_types') {
    return 'plugins/content_types';
  }
  if ($owner == 'addressfield') {
    return 'plugins/' . $plugin_type;
  }
}

/**
 * Implements hook_entity_view().
 *
 * Add the offsite header on the Order View at the user page.
 */
function creatingideas_entity_view($entity, $type, $view_mode, $langcode) {
  if ($type == 'commerce_order') {
    if ($entity->status == 'pending' && $entity->data['payment_method'] == 'offsite|commerce_payment_offsite') {
      $entity->content['creatingideas_header'] = array(
        '#markup' => '<div class="commerce-offsite-header">' . creatingideas_make_header($entity) . '</div>',
        '#weight' => -11,
      );
    }
  }
}

/**
 * Implementation of hook_commerce_price_component_type_info().
 * Creates a new discount price component type
 */
function creatingideas_commerce_price_component_type_info(){
  return array(
    'volume_discount' => array(
      'title' => t('Volume Discount'),
      'weight' => -10,
    ),
  );
}

/**
 * Implements hook_commerce_discount_offer_type_info().
 */
function creatingideas_commerce_discount_offer_type_info() {
  $types = array();
  $types['volume_discount_amount'] = array(
    'label' => t('Volume discount per meter'),
    'action' => 'creatingideas_volume_discount_amount',
    'entity types' => array('commerce_order'),
  );
  return $types;
}

/**
 * Implements hook_commerce_shipping_method_info().
 */
function creatingideas_commerce_shipping_method_info() {
  $shipping_methods = array();

  $shipping_methods['creating_flat_rate'] = array(
    'title' => t('Creating flat rate'),
    'description' => t('Defines a  flat rate method.'),
  );
  $shipping_methods['creating_250'] = array(
    'title' => t('Creating 250 rate'),
    'description' => t('Defines a  250 rate method.'),
  );

  return $shipping_methods;
}

/**
 * Implements hook_commerce_shipping_service_info().
 */
function creatingideas_commerce_shipping_service_info() {
  $shipping_services = array();

  $shipping_services['creating_flat_free'] = array(
    'title' => t('I will pick it up myself'),
    'description' => t('I will pick it up myself'),
    'display_title' => t('Free'),
    'shipping_method' => 'creating_flat_rate',
    'price_component' => 'shipping',
    'callbacks' => array(
      'rate' => 'creatingideas_rate_free',
    ),
  );

  $shipping_services['creating_flat_250'] = array(
    'title' => t('Shipping via post mail'),
    'description' => t('Shipping with normal post mail for units smaller than 15.'),
    'display_title' => t('Normal post delivery'),
    'shipping_method' => 'creating_250',
    'price_component' => 'shipping',
    'callbacks' => array(
      'rate' => 'creatingideas_rate_250',
    ),
  );

  return $shipping_services;
}

/**
 * Implements hook_commerce_shipping_service_info_alter().
 *
 * This should be removed once https://drupal.org/node/1369696 is resolved.
 */
/*function creatingideas_commerce_shipping_service_info_alter(&$shipping_services) {
  // Use t() to translate the shipping service display.
  foreach ($shipping_services as $name => &$shipping_service) {
    $shipping_service['display_title'] = t($shipping_service['display_title']);
  }
}*/

/**
 * Implements hook_commerce_checkout_pane_info_alter().
 */
function creatingideas_commerce_checkout_pane_info_alter(&$checkout_panes) {

  $order_id = arg(1);
  if (arg(0) != 'checkout' || !is_numeric($order_id)) {
    return;
  }

  $order = commerce_order_load($order_id);

  if (!empty($order->data) && !empty($order->data['payment_method']) &&
      $order->data['payment_method'] == 'offsite|commerce_payment_offsite') {

    $checkout_panes['checkout_completion_message']['callbacks']['checkout_form'] = 'creatingideas_completion_message_pane_checkout_form';
  }
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function creatingideas_commerce_payment_method_info() {

  $methods = array();

  $methods['offsite'] = array(
    'base' => 'creatingideas_offsite',
    'title' => t('Offsite Payment info'),
    'short_title' => t('Offsite Payment'),
    'display_title' => t('Offsite Payment Info'),
    'description' => t('Show Payment Information for offsite payment methods'),
  );

  return $methods;

}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function creatingideas_form_rules_ui_edit_element_alter(&$form, &$form_state) {
  // Reconstruct form only when ajax triggers it.
  if (!empty($form_state['triggering_element']['#submit'][0])) {
    $trigger = $form_state['triggering_element']['#submit'][0];
    $ajax_triggers = array('creatingideas_offsite_add_more_add_details', 'creatingideas_offsite_add_more_remove_details');

    if (in_array($trigger, $ajax_triggers)) {
      $settings = $form_state['values']['parameter']['payment_method']['settings']['payment_method']['settings'];
      $form['parameter']['payment_method']['settings']['payment_method']['settings'] = creatingideas_settings_form($settings);
    }
  }
}
/**
 * Implements hook_form_FORM_ID_alter().
 *
 * This module works by altering the checkout form to add an additional bit of
 * AJAX to the Account Information checkout pane via this hook.
 */
function creatingideas_form_commerce_checkout_form_alter(&$form, &$form_state) {
  global $user;

  // If the Account Information pane is on the current checkout page and the
  // user is not logged in...
  if (!$user->uid && !empty($form['account'])) {
    $form['account']['login']['mail'] += array(
      '#ajax' => array(
        'callback' => 'creatingideas_checkout_form_refresh',
        'wrapper' => 'account-login-container',
      ),
    );

    // Check the form state to see if an e-mail address has been specified.
    if (!empty($form_state['values']['account']['login'])) {
      $mail = trim($form_state['values']['account']['login']['mail']);

      // Don't attempt to load the user for an invalid e-mail address.
      if ($error = user_validate_mail($mail)) {
        form_set_error('account][login][mail', $error);
      }
      elseif ($account = user_load_by_mail($mail)) {
        // If a user already exists for the given e-mail address, display a
        // message letting the customer know this.
        $form['account']['login']['mail']['#description'] = t('There is already an account registered to %mail. You can login now to use your account information during checkout.', array('%mail' => $mail));

        $form['account']['login']['password'] = array(
          '#type' => 'password',
          '#title' => t('Password'),
        );

        $form['account']['login']['login_now'] = array(
          '#type' => 'submit',
          '#value' => t('Login now'),
          '#limit_validation_errors' => array(array('account')),
          '#validate' => array('creatingideas_checkout_form_validate'),
          '#submit' => array('creatingideas_checkout_form_submit'),
        );
      }
    }
  }
}

/**
 * Ajax callback: returns the account information pane to an AJAX request.
 */
function creatingideas_checkout_form_refresh($form, $form_state) {
  return $form['account']['login'];
}

/**
 * Validate callback: validate the user credentials
 */
function creatingideas_checkout_form_validate($form, &$form_state) {
  // @todo Add flood control support as in user_login_authenticate_validate().
  $account = user_load_by_mail($form_state['values']['account']['login']['mail']);

  // If the user account is blocked...
  if (user_is_blocked($account->name)) {
    // Display an appropriate error message.
    form_set_error('account][login][email', t('The username %name has not been activated or is blocked.', array('%name' => $account->name)));
  }
  elseif ($uid = user_authenticate($account->name, $form_state['values']['account']['login']['password'])) {
    // Otherwise, if the user authenticates based on the name of the loaded
    // account and the supplied password, retain the uid to login the user on
    // final submission.
    $form_state['creatingideas_uid'] = $uid;
  }
  else {
    // But indicate that we could not login the user if validation failed.
    form_set_error('account][login][password', t('Sorry, unrecognized username or password. <a href="@password">Have you forgotten your password?</a>', array('@password' => url('user/password'))));
  }
}

/**
 * Submit callback: attempt a login of the user now.
 */
function creatingideas_checkout_form_submit($form, &$form_state) {
  global $user;

  if (!empty($form_state['creatingideas_uid'])) {
    // Load the specified user into the global $user variable.
    $user = user_load($form_state['creatingideas_uid']);

    // "Finalize" the login by triggering the appropriate system messages, IP
    // address and login timestamp logging, and user login hook.
    user_login_finalize();

    // Convert the current cart order to an authenticated cart for the current
    // user and clear out our variable from the form state.
    commerce_cart_order_convert($form_state['order'], $user);
    unset($form_state['creatingideas_uid']);
  }
}

/**
 * Implements hook_form_alter().
 * @param type $form
 * @param type $form_state
 * @param type $form_id
 */
function creatingideas_form_alter(&$form, $form_state, $form_id) {
  //dsm($form_id);
  $form['#attached']['library'][] = array('creatingideas', 'jquery_ui_spinner');

  // Fix translation for "Shipping information" on checkout form and
  // checkout addresses
  if ($form['#id'] == 'commerce-checkout-form-adresses' || $form['#id'] == 'commerce-checkout-form-checkout') {
    if (isset($form['customer_profile_shipping'])){
      $form['customer_profile_shipping']['#title'] = t('Shipping information');
    }
  }

  // Fix translation for "Shipping information" on checkout review
  if ($form['#id'] == 'commerce-checkout-form-review') {
    if (isset($form['checkout_review']['review']['#data']['customer_profile_shipping'])){
      $form['checkout_review']['review']['#data']['customer_profile_shipping']['title'] = t('Shipping information');
    }
  }

}

/**
 * Implements hook_form_<commerce_product_ui_product_form>_alter().
 * @param type $form
 * @param type $form_state
 */
function creatingideas_form_commerce_product_ui_product_form_alter(&$form, $form_state) {
  //dsm($form['commerce_stock']['und'][0]['value'], 'Stock');
}

/**
 * Implements hook_form_<commerce_backoffice_product_quick_edit_form>_alter().
 */
function creatingideas_form_commerce_backoffice_product_quick_edit_form_alter(&$form, &$form_state, $product = NULL) {
  $product = $form_state['product'];

  $price_array = $product->field_price_per_meter[LANGUAGE_NONE][0];
  $currency = commerce_currency_load($price_array['currency_code']);
  $amount = commerce_currency_amount_to_decimal($price_array['amount'], $price_array['currency_code']);
  $default_price = number_format(commerce_currency_round(abs($amount), $currency), $currency['decimals'], $currency['decimal_separator'], $currency['thousands_separator']);

  $form['price_per_meter'] = array(
    '#type' => 'textfield',
    '#title' => t('Price / meter'),
    '#title_display' => 'invisible',
    '#default_value' => $default_price,
    '#size' => 5,
  );
  $form['#submit'][] = 'creating_backoffice_product_quick_edit_form_submit';

}

/**
 * Extra submit handler to save the product with extra fields:
 *   - field_price_per_meter.
 * @param type $form
 * @param type $form_state
 */
function creating_backoffice_product_quick_edit_form_submit($form, &$form_state) {

  $product = $form_state['product'];
  $currency_code = $product->field_price_per_meter[LANGUAGE_NONE][0]['currency_code'];

  // Make sure decimal separator is period and determine rounding boolean
  $currency = commerce_currency_load($currency_code);
  $price = $form_state['values']['price_per_meter'];
  if ($currency['decimal_separator'] == ',') {
    $price = str_replace(',', '.', $price);
  }
  $round = ($currency['rounding_step'] == 0) ? FALSE : TRUE;
  $product->field_price_per_meter[LANGUAGE_NONE][0]['amount'] = commerce_currency_decimal_to_amount($price, $currency_code, $round);
  $product->status = $form_state['values']['status'];
  commerce_product_save($product);

}

/**
 * Implements hook_form_<sewing_kit_display_node_form>_alter().
 */
function creatingideas_form_sewing_kit_display_node_form_alter(&$form, $form_state) {
  _creatingideas_change_node_products_display_form($form, $form_state);
}

/**
 * Implements hook_form_<cloth_display_node_form>_alter().
 */
function creatingideas_form_cloth_display_node_form_alter(&$form, $form_state) {
  _creatingideas_change_node_products_display_form($form, $form_state);
}

/**
 * Implements hook_form_<voucher_display_node_form>_alter().
 */
function creatingideas_form_voucher_display_node_form_alter(&$form, $form_state) {
  _creatingideas_change_node_products_display_form($form, $form_state);
}

/**
 * Helper function to change the node form for product displays.
 * @param type $form
 * @param type $form_state
 */
function _creatingideas_change_node_products_display_form(&$form, $form_state) {

  // Remove or hide all the irrelevant wrappers.
  if (isset($form['field_products']['und']['form'])) {
    unset($form['field_products']['und']['form']['product_details']);
    $form['field_products']['und']['#title'] = '';
    $form['field_products']['und']['#type'] = 'container';
  }

}

/**
 * Implements hook_commerce_cart_line_item_refresh().
 * @param type $line_item
 * @param type $order_wrapper
 */
function creatingideas_commerce_cart_line_item_refresh($line_item, $order_wrapper) {

}

/**
 * Implements hook_commerce_cart_order_refresh().
 * @param type $order_wrapper
 *
 * The "Volume discount" is calculated here to show the user. In the checkout
 * process there is a rule to catch it as a real discount.
 */
function creatingideas_commerce_cart_order_refresh($order_wrapper) {
  //dsm('creatingideas_commerce_cart_order_refresh not used');
}

/**
 * Helper function to calculate the total price of a line item.
 * @param type $line_item_wrapper
 */
function _creatingideas_calculate_line_item_total_price($line_item_wrapper) {

  // Only calculate if the product type is cloth, meaning it works with physical
  // dimensions.
  if (!isset($line_item_wrapper->commerce_product) || $line_item_wrapper->commerce_product->value()->type != 'cloth') {
    return NULL;
  }

  // Get the product to have the price per meter.
  $line_item = $line_item_wrapper->value();
  $product = $line_item_wrapper->commerce_product->value();
  $product_wrapper = entity_metadata_wrapper('commerce_product', $product);
  $has_price_per_meter = $product_wrapper->field_price_per_meter->value();

  // Calculate the relation to meter. Exit if no length is known or the length
  // matches 1 meter exactly.
  $dimensions = $product_wrapper->field_dimensions->value();
  if (empty($dimensions['length']) || $dimensions['length'] == 100) {
    return NULL;
  }
  $relation_to_meter = 100 / $dimensions['length'];

  // Prepare logic for the total discount on the line item for 1 meter.
  $discount_quantity = floor($line_item_wrapper->quantity->value() / $relation_to_meter);
  $discount_left_over = $line_item_wrapper->quantity->value() % $relation_to_meter;

  // Prepare the base price to work with.
  $price = $line_item_wrapper->commerce_unit_price->amount->value();

  if (!empty($has_price_per_meter)) {
    $price_per_meter = $product_wrapper->field_price_per_meter->amount->value();
    if ($price_per_meter != $price) {
      $new_total = ($discount_quantity * $price_per_meter) + ($discount_left_over * $price);
    }
    else {
      $new_total = ($line_item_wrapper->quantity->value() * $price);
    }
  }
  else {
    $new_total = ($discount_quantity * $relation_to_meter * $price) + ($discount_left_over * $price);
  }

  return $new_total;

}
